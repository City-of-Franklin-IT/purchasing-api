const asyncHandler = require('../middleware/async')
const ErrorResponse = require('../utils/errorResponse')
const { Purchase, PurchaseAttachment } = require('../models')

// @desc    Get purchases
// @route   GET /api/v1/ffd/purchasing/purchases
// @access  Public
exports.getPurchases = asyncHandler(async (req, res, next) => {
  res.status(200).json(res.advancedResults)
})

// @desc    Get purchase
// @route   GET /api/v1/ffd/purchasing/purchases/purchase/:uuid
// @access  Private
exports.getPurchase = asyncHandler(async (req, res, next) => {
  const purchase = await Purchase.findOne({
    where: {
      uuid: req.params.uuid
    },
    include: {
      model: PurchaseAttachment,
      attributes: ['fileName']
    }
  })

  if(!purchase) {
    return next(new ErrorResponse(`Could not return purchase with uuid ${req.params.uuid}`, 500))
  }

  res.status(200).json({
    success: true,
    data: purchase
  })
})

// @desc    Create purchase
// @route   POST /api/v1/ffd/purchasing/purchase/create
// @access  Private
exports.createPurchase = asyncHandler(async (req, res, next) => {
  const { purchaseDestination, purchaseDetails, vendor, purchaseAmount, lastFour, OPIQNum, OPIQEntryDate, uuid, createdAt, updatedAt } = req.body

  // User object generated by protect middleware
  const createdBy = req.user.email
  const updatedBy = req.user.email

  // Get current maxID
  let maxID = await Purchase.findOne({
    order: [['id', 'desc']],
    limit: 1
  })

  if(!maxID) {
    maxID = 0
  } else {
    maxID = maxID.id
  }

  let fiscalYear 

  // Get current fiscal year
  const getFiscalYear = () => {
    const today = new Date()
    if(today.getMonth() < 6) {
      fiscalYear = today.getFullYear()
    } else {
      fiscalYear = today.getFullYear() + 1
    }
  }

  getFiscalYear()

  const purchase = await Purchase.create({
    purchaseId: "PUR" + fiscalYear + "-" + (maxID + 1),
    purchaseDestination,
    purchaseDetails,
    vendor,
    purchaseAmount,
    lastFour,
    status: OPIQNum ? "Completed" : "Purchased",
    OPIQNum,
    OPIQEntryDate,
    uuid,
    createdBy,
    createdAt,
    updatedBy,
    updatedAt
  })

  if(!purchase) {
    return next(new ErrorResponse("Could not create new purchase", 500))
  }

  res.status(200).json({
    success: true,
    data: purchase
  })
})

// @desc    Update purchase
// @route   PUT /api/v1/ffd/purchasing/purchase/update/:uuid
// @access  Public
exports.updatePurchase = asyncHandler(async (req, res, next) => {
  const { purchaseDescription, purchaseDestination, purchaseDetails, vendor, purchaseAmount, lastFour, OPIQNum, OPIQEntryDate, updatedAt } = req.body

  const updatedBy = req.user.email

  const purchaseUpdate = await Purchase.update({
    purchaseDescription,
    purchaseDestination,
    purchaseDetails,
    vendor,
    purchaseAmount,
    lastFour,
    status: OPIQNum ? "Completed" : "Purchased",
    OPIQNum,
    OPIQEntryDate,
    updatedBy,
    updatedAt
  },
  {
    where: {
      uuid: req.params.uuid
    },
    returning: true,
    plain: true
  })

  if(!purchaseUpdate) {
    return next(new ErrorResponse(`Could not update purchase by uuid ${req.params.uuid}`, 500))
  }

  const purchase = await Purchase.findOne({
    where: {
      uuid: req.params.uuid
    }
  })

  const { purchaseId } = purchase

  if(!OPIQNum) {
    await Purchase.update({
      status: "Purchased"
    },
    {
      where: {
        purchaseId
      }
    })
  }

  res.status(200).json({
    success: true,
    data: purchase
  })
})

// @desc    Delete purchase
// @route   DELETE /api/v1/ffd/purchasing/purchase/delete/:uuid
// @access  Private
exports.deletePurchase = asyncHandler(async (req, res, next) => {
  const purchase = await Purchase.findOne({
    where: {
      uuid: req.params.uuid
    },
    returning: true,
    plain: true
  })

  const { purchaseId } = purchase

  if(!purchaseId) {
    return next(new ErrorResponse(`Could not find purchase with uuid ${req.params.uuid}`, 500))
  }

  await Purchase.destroy({
    where: {
      uuid: req.params.uuid
    }
  })

  // Delete any associated attachments
  await PurchaseAttachment.destroy({
    where: {
      purchaseId
    }
  })

  res.status(200).json({
    success: true,
    data: {}
  })
})